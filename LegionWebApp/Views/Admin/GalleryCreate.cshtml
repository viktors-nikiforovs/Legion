@using LegionWebApp.Models;
@using Microsoft.AspNetCore.Mvc.Localization;
@model LegionWebApp.Models.CreateGalleryModel
@inject IViewLocalizer T

@{
	ViewData["Title"] = "GalleryCreate";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
	body {
		color: white;
	}
</style>

<h2>GalleryCreate</h2>

<form id="upload-form" asp-controller="Admin" method="post" asp-action="CreateGallery" enctype="multipart/form-data">
	<div class="row row-cols-2 mb-2">
		<div class="col">
			<div class="input-group mb-2">
				<textarea id="textEN" class="form-control" aria-label="With textarea" placeholder="@T["Text in English"]" rows="3"></textarea>
			</div>
		</div>
		<div class="col">
			<div class="input-group mb-2">
				<textarea id="textUA" class="form-control" aria-label="With textarea" placeholder="@T["Text in Ukranian"]" rows="3"></textarea>
			</div>
		</div>
		<div class="col">
			<div class="input-group mb-2">
				<textarea id="textFR" class="form-control" aria-label="With textarea" placeholder="@T["Text in French"]" rows="3"></textarea>
			</div>
		</div>
		<div class="col">
			<div class="input-group mb-2">
				<textarea id="textDE" class="form-control" aria-label="With textarea" placeholder="@T["Text in German"]" rows="3"></textarea>
			</div>
		</div>
	</div>
	<div class="row row-cols-2 mb-2">
		<div class="col-2">
			<div class="input-group">
				<input asp-for="GalleryItem.Date" type="date" id="date" class="form-control" required>
				<span asp-validation-for="GalleryItem.Date" class="text-danger"></span>
			</div>
		</div>
		<div class="col-10">
			<div class="input-group">
				<label class="form-label">@T["Display media"]</label>
				<label id="maxDisplayPreview" class=" mb-2">: 6</label>
				<input type="range" class="form-range" min="2" max="12" value="6" id="maxDisplay">
			</div>
		</div>
	</div>
	<div class="form-check form-switch">
		<input class="form-check-input" type="checkbox" id="lockResize" checked>
		<label class="form-check-label" for="lockResize">All same size</label>
	</div>
	<div id="mediaSettings" class="row mb-2 row-cols-3">
	</div>
	<div class="row">
		<div class="col">
			<input type="file" class="custom-file-input" id="formFileMultiple" multiple>
			<label class="custom-file-label" for="formFileMultiple" id="fileInputLabel">Choose files</label>
		</div>
	</div>
	<div class="row mb-2">
		<div class="col text-center">
			<input type="submit" value='@T["Create & Upload"]' class="btn btn-primary" />
		</div>
	</div>
</form>

<div class="feed-post">
	<div class="post-header">
		<img src="~/images/logo.png" class="profile-picture">
		<div class="post-info">
			<div class="username">@T["Legion Foundation"]</div>
			<div id="datePreview" class="post-time"></div>
		</div>
	</div>
	<div id="titlePreview" class="post-content"></div>
	<div class="container post-media">
		<div id="hiddenCountPreview" class="row row-cols-2 row-cols-sm-4" data-hidden-count="">
		</div>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
<script>
	$(document).ready(function () {
		var mediaContainer = document.getElementById('hiddenCountPreview');
		var mediaSettings = document.getElementById('mediaSettings');
		Sortable.create(mediaContainer, {
			animation: 150,
			handle: '.media-item',
			draggable: '.draggable-media-item',
			onEnd: function (evt) {
				var item = galleryItem.Media.splice(evt.oldIndex, 1)[0];
				galleryItem.Media.splice(evt.newIndex, 0, item);
				var filesContainer = document.getElementById('filesContainer');
				if (filesContainer) {
					var fileItem = filesContainer.children[evt.oldIndex];
					if (fileItem) {
						filesContainer.removeChild(fileItem);
						filesContainer.insertBefore(fileItem, filesContainer.children[evt.newIndex]);
					}
				}
				var settingsItem = mediaSettings.children[evt.oldIndex];
				if (settingsItem) {
					mediaSettings.removeChild(settingsItem);
					if (mediaSettings.children[evt.newIndex]) {
						mediaSettings.insertBefore(settingsItem, mediaSettings.children[evt.newIndex]);
					} else {
						mediaSettings.appendChild(settingsItem);
					}
				}
				updateHiddenMediaItems();
			}
		});
	});
</script>
<script>
	var galleryItem = {
		Id: null,
		Title: "Title goes here",
		Date: "YYYY-MM-DD",
		Visible: true,
		MaxDisplay: 6,
		Media: []
	};

	var localizationString = {
		Id: parseInt($('#id').val(), 10),
		Key: $('#key').val(),
		Value_FR: $('#value_fr').val(),
		Value_DE: $('#value_de').val(),
		Value_UK: $('#value_uk').val()
	};

	$(document).on('input change', 'form textarea, form input', function () {

		localizationString.Key = $('#textEN').val();
		localizationString.Value_UK = $('#textUA').val();
		localizationString.Value_FR = $('#textFR').val();
		localizationString.Value_DE = $('#textDE').val();

		var urlPattern = /\b((?:https?:\/\/)?[\w.-]+\.[a-z]{2,})\b/gim;

		function convertUrlsToLinks(text) {
			return text.replace(urlPattern, function (_, url) {
				var prefix = /^https?:\/\//.test(url) ? '' : 'https://';
				return '<a href="' + prefix + url + '" target="_blank">' + url + '</a>';
			});
		}

		localizationString.Key = convertUrlsToLinks(localizationString.Key);
		localizationString.Value_UK = convertUrlsToLinks(localizationString.Value_UK);
		localizationString.Value_FR = convertUrlsToLinks(localizationString.Value_FR);
		localizationString.Value_DE = convertUrlsToLinks(localizationString.Value_DE);

		galleryItem.Title = localizationString.Key;
		galleryItem.Date = $('#date').val();
		galleryItem.MaxDisplay = $('#maxDisplay').val();

		if (galleryItem.MaxDisplay == 12) {
			$('#maxDisplayPreview').text(': ALL');
		} else {

			$('#maxDisplayPreview').text(': ' + galleryItem.MaxDisplay);
		}
		$('#titlePreview').html(galleryItem.Title);
		$('#datePreview').text(galleryItem.Date);
	});

	var dateInput = document.getElementById("date");
	var currentLanguage = "@System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName";

	flatpickr(dateInput, {
		locale: currentLanguage,
		dateFormat: "d.m.Y"
	});

	$(document).ready(function () {
		var fileCount = 0;
		$("#formFileMultiple").on("change", function () {
			var files = this.files;
			for (var i = 0; i < files.length; i++) {
				var file = files[i];

				var media = {
					Id: fileCount,
					File: file,
					Col: "4",
					Poster: null,
					DisplayOrder: galleryItem.Media.length
				};
				galleryItem.Media.push(media);
				createFileRow(file, fileCount);
				createMediaElement(file, fileCount, media);
				updateHiddenMediaItems();
				fileCount++;
			}
		});

		$('#maxDisplay').on("input change", function () {
			updateHiddenMediaItems();
		});

		$("#upload-form").on("submit", function (e) {
			//Send files to  controller
		});

	});

	function createMediaElement(file, fileCount, media) {
		var $colDiv = $('<div>', { id: "fileMedia" + fileCount, class: "col draggable-media-item position-relative" });
		var $mediaItem = $('<div>', { id: "media-item", class: "media-item position-relative", style: "transform: none !important;" }); // Added position-relative
		var fileUrl = URL.createObjectURL(file);

		if (file.type.startsWith("image/")) {
			var $img = $('<img>', { class: "lazy smallMedia", src: fileUrl });
			$mediaItem.append($img);
		} else if (file.type.startsWith("video/")) {
			var $videoContainer = $('<div>', { class: "video-container position-relative" });

			var $video = $('<video>', {
				class: "lazy smallMedia",
				disablePictureInPicture: true,
				preload: "none",
				controls: true,
				controlslist: "noplaybackrate nodownload nofullscreen",
				src: fileUrl,
				poster: "",
				type: file.type
			});

			var $snapButton = $('<button>', {
				class: "btn btn-primary position-absolute",
				text: "snap",
				style: "top: 5px; left: 5px; z-index: 10;"
			});

			$snapButton.on("click", function () {
				var canvas = document.createElement("canvas");
				canvas.width = $video[0].videoWidth;
				canvas.height = $video[0].videoHeight;
				var ctx = canvas.getContext("2d");
				ctx.drawImage($video[0], 0, 0, canvas.width, canvas.height);
				var imgURL = canvas.toDataURL();

				fetch(imgURL)
					.then(response => response.blob())
					.then(blob => {
						var fileName = file.name;
						var substring = fileName.substring(0, fileName.lastIndexOf(".mp4")) + ".jpg";
						var tempFile = new File([blob], substring);
						// Now you can use the 'file' object as needed
						media.Poster = tempFile;

					});
				$video[0].poster = imgURL;
				$snapButton.removeClass('btn-primary').addClass('btn-secondary');
			});

			$videoContainer.append($snapButton);
			$videoContainer.append($video);
			$mediaItem.append($videoContainer);
		}

		var $removeButton = $('<button>', {
			class: 'btn btn-danger position-absolute',
			text: 'X',
			style: 'top: 5px; right: 5px; z-index: 10;'
		});

		$removeButton.on("click", function () {
			removeMediaItem(fileCount);
			updateHiddenMediaItems();
		});

		$mediaItem.append($removeButton);
		$colDiv.append($mediaItem);
		$('#hiddenCountPreview').append($colDiv);
		console.log(galleryItem.Media);
	}

	function createFileRow(file, fileCount) {
		var $col = $('<div>', { id: "fileSetting" + fileCount, class: 'col' });
		var $row = $('<div>', { class: 'row' });
		var $colAutoName = $('<div>', { class: 'col-2' });
		var $nameLink = $('<a>').text(file.name);
		$colAutoName.append($nameLink);
		var $colAutoLabel = $('<div>', { class: 'col-3' });
		var $label = $('<label>', {
			for: 'colWidth',
			class: 'form-label',
			text: 'Width: '
		});
		$colAutoLabel.append($label);
		var $widthValue = $('<span>', { id: 'widthValue' + fileCount, text: '3' });
		$colAutoLabel.append($widthValue);
		var $colAutoInput = $('<div>', { class: 'col-auto' });
		var $input = $('<input>', {
			type: 'range',
			class: 'form-range',
			min: 1,
			max: 12,
			step: 1,
			value: 3,
			"data-file-count": fileCount
		});

		$input.on("input", function () {
			var widthValue = $(this).val();
			var fileCount = $(this).data("file-count"); // Retrieve fileCount from data attribute
			if ($('#lockResize').is(':checked')) {
				$('#mediaSettings .form-range').val(widthValue);
				$('#mediaSettings .form-range').each(function () {
					var fileCount = $(this).data("file-count");
					$('#widthValue' + fileCount).text(widthValue);
					$("#fileMedia" + fileCount).attr("class", "draggable-media-item col-" + widthValue);
				});
			} else {
				$('#widthValue' + fileCount).text(widthValue);
				$("#fileMedia" + fileCount).attr("class", "draggable-media-item col-" + widthValue);
			}
			var media = galleryItem.Media.find(m => m.Id === fileCount);
			if (media) { // Check if media is not undefined
				media.Col = "col-" + widthValue;
			} else {
				console.error('media is undefined');
			}
		});


		$colAutoInput.append($input);
		$row.append($colAutoName, $colAutoLabel, $colAutoInput);
		$col.append($row);
		$('#mediaSettings').append($col);
		return $col;
	}

	function updateHiddenMediaItems() {
		var maxDisplay = parseInt($('#maxDisplay').val(), 10);
		var maxRangeValue = 12;
		if (maxDisplay === maxRangeValue) {
			maxDisplay = Number.MAX_SAFE_INTEGER;
		}

		$('.feed-post').each(function () {
			var $postMedia = $(this).find('.post-media');
			var $mediaItems = $(this).find('.media-item');
			var mediaItemCount = $mediaItems.length;
			$mediaItems.show();
			$postMedia.find('.count-overlay-text').remove();
			$postMedia.find('.count-overlay').removeClass('count-overlay');

			if (mediaItemCount > maxDisplay) {
				$mediaItems.slice(maxDisplay).each(function () {
					$(this).hide().find('img, video').each(function () {
						$(this).data('src', $(this).attr('src')).removeAttr('src');
					});
				});

				var hiddenCount = mediaItemCount - maxDisplay;
				$(this).find('.media-item').eq(maxDisplay - 1).addClass('count-overlay').append('<div class="count-overlay-text">+' + hiddenCount + '</div>');
			}
			$mediaItems.slice(0, maxDisplay).find('img, video').each(function () {
				if ($(this).data('src')) {
					$(this).attr('src', $(this).data('src'));
				}
			});
		});
	}

	function removeMediaItem(fileCount) {
		var fileMediaElement = document.getElementById("fileMedia" + fileCount);
		var fileSettingElement = document.getElementById("fileSetting" + fileCount);

		for (var i = 0; i < galleryItem.Media.length; i++) {
			if (galleryItem.Media[i].Id === fileCount) {
				galleryItem.Media.splice(i, 1);
				break;
			}
		}
		galleryItem.Media.forEach((item, index) => {
			item.DisplayOrder = index;
		});
		if (fileMediaElement) {
			fileMediaElement.parentNode.removeChild(fileMediaElement);
		}
		if (fileSettingElement) {
			fileSettingElement.parentNode.removeChild(fileSettingElement);
		}
		console.log(galleryItem.Media);
	}

	$("#upload-form").on("submit", function (e) {
		e.preventDefault();

		var formData = new FormData();

		// Append galleryItem properties to formData
		formData.append("Id", galleryItem.Id);
		formData.append("Title", galleryItem.Title);
		formData.append("Date", galleryItem.Date);
		formData.append("Visible", galleryItem.Visible);
		formData.append("MaxDisplay", galleryItem.MaxDisplay);

		// Append localizationString properties to formData
		formData.append("LocalizationStringId", localizationString.Id);
		formData.append("Key", localizationString.Key);
		formData.append("Value_FR", localizationString.Value_FR);
		formData.append("Value_DE", localizationString.Value_DE);
		formData.append("Value_UK", localizationString.Value_UK);

		// Append files to formData
		for (var i = 0; i < galleryItem.Media.length; i++) {
			formData.append("Media", galleryItem.Media[i].File);
			formData.append("MediaCol", galleryItem.Media[i].Col);
			formData.append("MediaPoster", galleryItem.Media[i].Poster);
		}



		$.ajax({
			url: '@Url.Action("CreateGallery", "Admin")',
			type: 'POST',
			data: formData,
			processData: false,  // tell jQuery not to process the data
			contentType: false,  // tell jQuery not to set contentType
			success: function (data) {
				alert("Gallery item and localization string have been sent successfully.");
			},
			error: function (xhr, status, error) {
				alert("Error: " + error);
			}
		});
	});


</script>