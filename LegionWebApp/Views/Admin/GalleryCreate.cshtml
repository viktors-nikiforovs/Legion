@using Microsoft.AspNetCore.Mvc.Localization;
@model LegionWebApp.Models.CreateGalleryModel
@inject IViewLocalizer T

@{
	ViewData["Title"] = "GalleryCreate";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>GalleryCreate</h1>

<h4>GalleryItem</h4>
<div id="gallery-items" class="feed-container">
	<div class="row">
		<form id="upload-form" asp-controller="Admin" method="post" asp-action="CreateGalleryItem" enctype="multipart/form-data">
			<div class="col-md-12">
				<div class="row">
					<div class="col-6 mb-1">
						<div class="input-group">
							<span asp-for="localizationString.Key" id="engTitle" class="input-group-text">@T["English"]</span>
							<textarea asp-for="localizationString.Key" class="form-control" aria-label="With textarea" rows="4"></textarea>
						</div>
					</div>
					<div class="col-6 mb-1">
						<div class="input-group">
							<span class="input-group-text">@T["Ukranian"]</span>
							<textarea asp-for="localizationString.Value_UK" class="form-control" aria-label="With textarea" rows="4"></textarea>
						</div>
					</div>
					<div class="col-6 mb-1">
						<div class="input-group">
							<span class="input-group-text">@T["French"]</span>
							<textarea asp-for="localizationString.Value_FR" class="form-control" aria-label="With textarea" rows="4"></textarea>
						</div>
					</div>
					<div class="col-6 mb-1">
						<div class="input-group">
							<span class="input-group-text">@T["German"]</span>
							<textarea asp-for="localizationString.Value_DE" class="form-control" aria-label="With textarea" rows="4"></textarea>
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col-2 mb-1">
						<div class="input-group">
							<label class="input-group-text" asp-for="galleryItem.Date">@T["Date"]</label>
							<input asp-for="galleryItem.Date" type="date" id="date" class="form-control" required>
							<span asp-validation-for="galleryItem.Date" class="text-danger"></span>
						</div>
					</div>
					<div class="col-10 mb-1">
						<div class="input-group">
							<label class="form-label">@T["Hide media after"]</label>
							<span id="customRangeValue" class=" mb-1">: 6</span>
							<input asp-for="galleryItem.MaxDisplay" type="range" class="form-range" min="2" max="12" value="6" id="maxDisplayInput">
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col-2 mb-1">
						<input type="button" id="browseFilesButton" value='@T["Browse Files"]' class="form-control-file btn btn-secondary">
					</div>
					<div class="col-2 mb-1">
						<input type="submit" value='@T["Create & Upload"]' class="btn btn-primary" />
					</div>
				</div>
				<div id="files-container"></div>
				<input type="hidden" id="myFiles" name="myFiles" hidden />
				<div class="modal" tabindex="-1" id="uploadModal" style="color:black; z-index:9999">
					<div class="modal-dialog modal-dialog-centered">
						<div class="modal-content">
							<div class="modal-header">
								<h5 id="uploadStatus" class="modal-title"></h5>
							</div>
							<div class="modal-body">
								<div class="progress">
									<div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%">25%</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>
</div>

<div id="preview">
@await Html.PartialAsync("~/Views/Home/_GalleryItems.cshtml", Model)
</div>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
<script>
	document.addEventListener('DOMContentLoaded', function () {
		var filesContainer = document.getElementById("files-container");
		var previewContainer = document.getElementById("preview-container");

		let selectedFiles = [];
		
		function previewFile(event) {
			var files = event.target.files;
			var mediaRow = document.querySelector('.row.row-cols-2.row-cols-sm-4');

			for (var i = 0; i < files.length; i++) {
				var file = files[i];
				var fileId = 'file-' + Date.now() + '-' + i;
				var fileName = file.name;
				selectedFiles.push({ id: fileId, file: file });

				var fileInput = event.target;
				fileInput.setAttribute('data-file-id', fileId); // Add a custom data attribute to store the file ID


				var removeIcon = document.createElement("span");
				removeIcon.className = "position-absolute top-0 end-0 close";
				removeIcon.id = "removeIcon-" + fileId;
				removeIcon.style.cursor = "pointer";
				removeIcon.onclick = (function (fileId) {
					return function () {
						handleRemoveIconClick(fileId);
					};
				})(fileId);

				if (file.type.startsWith("image/")) {
					var colDiv = document.createElement("div");
					colDiv.className = "col dragable";

					var mediaItemDiv = document.createElement("div");
					mediaItemDiv.className = "media-item position-relative";
					mediaItemDiv.setAttribute('data-file-id', fileId);
					mediaItemDiv.setAttribute('data-file-name', fileName);

					var img = document.createElement("img");
					img.className = "img-fluid";
					img.src = URL.createObjectURL(file);

					mediaItemDiv.appendChild(img);
					mediaItemDiv.appendChild(removeIcon);
					colDiv.appendChild(mediaItemDiv);
					mediaRow.appendChild(colDiv);
				} else if (file.type.startsWith("video/")) {
					var colDiv = document.createElement("div");
					colDiv.className = "col dragable";

					var mediaItemDiv = document.createElement("div");
					mediaItemDiv.className = "media-item position-relative";
					mediaItemDiv.setAttribute('data-file-id', fileId);
					mediaItemDiv.setAttribute('data-file-name', fileName);

					var video = document.createElement("video");
					video.preload = "metadata";
					video.src = URL.createObjectURL(file);

					createVideoPreview(video, fileId, mediaItemDiv, removeIcon);

					colDiv.appendChild(mediaItemDiv);
					mediaRow.appendChild(colDiv);
				}
			}
			initSortable(mediaRow);
		}


		function initSortable(container) {
			// Make sure SortableJS is available before using it
			if (typeof Sortable !== 'undefined') {
				new Sortable(container, {
					animation: 150,
					draggable: '.dragable', // Specify the draggable items using their class
					onUpdate: function (evt) {
						// This function will be called when the order of items changes
						console.log('Moved:', evt.item);
					}
				});
			}
		}

		function createVideoPreview(video, fileId, mediaItemDiv, removeIcon) {
			video.addEventListener("loadedmetadata", function () {
				video.currentTime = 1;
			});

			video.addEventListener("seeked", function () {
				var canvas = document.createElement("canvas");
				canvas.width = video.videoWidth;
				canvas.height = video.videoHeight;
				var ctx = canvas.getContext("2d");
				ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

				var img = document.createElement("img");
				img.className = "img-fluid";
				img.src = canvas.toDataURL("image/jpeg");

				mediaItemDiv.appendChild(img);
				mediaItemDiv.appendChild(removeIcon);
			});
		}

		function createFileList(array) {
			const dt = new DataTransfer();
			for (let file of array) {
				dt.items.add(file);
			}
			return dt.files;
		}

		function uploadFiles() {
			return new Promise(function (resolve, reject) {
				const uploadProgress = document.getElementById('uploadProgress');
				const uploadStatus = document.getElementById('uploadStatus');
				let hasFile = false;

				for (const fileObj of selectedFiles) {
					hasFile = true; // Add this line
					const newFileInput = document.createElement('input');
					newFileInput.type = 'file';
					newFileInput.name = 'files[]';
					newFileInput.className = 'form-control-file d-none';
					newFileInput.setAttribute('data-file-id', fileObj.id); // Add this line
					newFileInput.files = createFileList([fileObj.file]);
					filesContainer.appendChild(newFileInput);
				}

				if (!hasFile) {
					alert("Please select at least one file.");
					return;
				}
				var uploadModal = new bootstrap.Modal(document.getElementById('uploadModal'), { backdrop: 'static', keyboard: false });
				uploadModal.show();

				const formData = new FormData(); // Initialize formData

				for (let i = 0; i < selectedFiles.length; i++) {
					formData.append('files', selectedFiles[i].file);
					//document.getElementById("myFiles").files = createFileList(selectedFiles.map(fileObj => fileObj.file));
				}
				const dateValue = document.getElementById("date").value;
				formData.append('path', dateValue);

				const xhr = new XMLHttpRequest();
				xhr.upload.addEventListener('progress', function (e) {
					if (e.lengthComputable) {
						const progressBar = document.querySelector('.progress-bar');
						progressBar.setAttribute('aria-valuenow', e.loaded);
						progressBar.setAttribute('aria-valuemax', e.total);
						progressBar.textContent = `${((e.loaded / e.total) * 100).toFixed(0)}%`;
						progressBar.style.width = ((e.loaded / e.total) * 100) + '%';
						uploadStatus.textContent = `Uploading...`;
					}
				}, false);

				xhr.addEventListener('load', function () {
					if (xhr.status === 200) {
						const uploadedFileNames = JSON.parse(xhr.responseText);
						console.log("JSON " + uploadedFileNames); // Array of uploaded file names

						document.getElementById("myFiles").value = uploadedFileNames.join(",");

						uploadStatus.textContent = 'Upload complete';
						setTimeout(() => {
							uploadStatus.textContent = '';
							uploadModal.hide();
							resolve();
						}, 1000);
					} else {
						uploadStatus.textContent = 'Upload failed';
						uploadModal.hide();
					}
				}, false);

				xhr.addEventListener('error', function () {
					uploadStatus.textContent = 'Upload failed';
					uploadModal.hide();
					reject();
				}, false);

				xhr.open('POST', '@Url.Action("UploadFiles", "Admin")', true);
				xhr.setRequestHeader("RequestVerificationToken", document.getElementsByName("__RequestVerificationToken")[0].value);
				xhr.send(formData);
			});
		}

		function submitFormWithoutFiles() {
			const form = document.getElementById("upload-form");
			var myFiles = document.getElementById("myFiles");
			console.log("files " + myFiles);

			form.submit();
		}


		function handleFormSubmit(e) {
			const form = e.target;
			if (!form.checkValidity()) {
				// If the form is not valid, let the browser show the validation errors
				return;
			}
			e.preventDefault();
			uploadFiles().then(function () {
				// After successful upload, submit the form without files
				submitFormWithoutFiles();
			}).catch(function () {
				alert("File upload failed!");
			});
		}

		document.getElementById('upload-form').addEventListener('submit', handleFormSubmit);

		function addFileInput(mediaType) {
			var fileInput = document.createElement('input');
			fileInput.type = 'file';
			fileInput.name = 'files[]';
			fileInput.className = 'form-control-file d-none';
			fileInput.multiple = true;

			if (mediaType === 'Image') {
				fileInput.setAttribute('asp-for', 'galleryItem.Media.Image');
			} else if (mediaType === 'video') {
				fileInput.setAttribute('asp-for', 'galleryItem.Media.Video');
			}

			fileInput.addEventListener('change', previewFile);
			filesContainer.appendChild(fileInput);
			fileInput.click();
		}



		function handleRemoveIconClick(fileId) {
			selectedFiles = selectedFiles.filter(fileObj => fileObj.id !== fileId); // Remove the file from the selectedFiles array

			var mediaItemDiv = document.querySelector('div[data-file-id="' + fileId + '"]');
			if (mediaItemDiv) {
				var colDiv = mediaItemDiv.parentElement;
				colDiv.remove(); // Remove the parent div, which is the dynamically created 'col' div
			}

			// Find and remove the associated input element for the removed file
			const fileInputToRemove = document.querySelector(`input[type="file"][data-file-id="${fileId}"]`);
			if (fileInputToRemove) {
				fileInputToRemove.remove();
			}
		}


		function createFileList(array) {
			const dt = new DataTransfer();
			for (let file of array) {
				dt.items.add(file);
			}
			return dt.files;
		}



		function getFileInputs(excludeId) {
			const allFileInputs = document.querySelectorAll('#files-container input[type="file"]');
			const filteredFileInputs = Array.from(allFileInputs).filter(input => input.id !== excludeId);
			return filteredFileInputs;
		}

		document.getElementById('browseFilesButton').addEventListener('click', function () {
			// Pass the media type, either 'image' or 'video', to the addFileInput function
			addFileInput('Image'); // or 'video' if you want to add a video input
		});

		document.getElementById('upload-form').addEventListener('submit', uploadFiles);
	});
</script>

<script>
	$(document).ready(function () {
		$('#upload-form').on('input', function () {
			//updateGalleryItems();
		});
	});
</script>
<script>
	function updateGalleryItems() {
		const formData = new FormData(document.getElementById("upload-form"));

		$.ajax({
			url: '@Url.Action("GetGalleryItems", "Admin")', // Replace "Home" with your controller name if necessary
			type: 'POST',
			data: formData,
			processData: false,
			contentType: false,
			success: function (result) {
				$('#preview').html(result);
			},
			error: function () {
				console.error('Failed to update gallery items');
			}
		});
	}
	flatpickr(document.getElementById("date"), {
		locale: "@System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName",
		dateFormat: "d.m.Y"
	});

</script>
<script>
	var hideMediaOverlay = 6;
	const customRangeValue = document.getElementById('customRangeValue');
	document.getElementById("maxDisplayInput").addEventListener("input", function () {
		hideMediaOverlay = this.value;
		customRangeValue.innerText = ": " + this.value;
		$('.post-media').attr('data-hide-media-overlay', hideMediaOverlay);
		hideOverlay();
	});
</script>
