@model IEnumerable<LegionWebApp.Models.GalleryItem>
@using LegionWebApp.Models;
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization
@inject IViewLocalizer T

<div class="feed-container">
	@{
		int i = 1;
	}
	@foreach (var item in Model)
	{
		<div class="feed-post">
			<div class="post-header">
				<img src="~/images/logo.png" class="profile-picture">
				<div class="post-info">
					<div class="username">@T["Legion Foundation"]</div>
					<div class="post-time">@T[DateOnly.Parse(item.Date).ToShortDateString()]</div>
				</div>
			</div>
			<div class="post-content">
				@T[@item.Title]
				@{
					DateTime inputDate;
					DateTime.TryParseExact(item.Date, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out inputDate);
					item.Date = inputDate.ToString("dd.MM.yyyy");
				}
			</div>
			<div class="container post-media" data-hide-media-overlay="@item.HideMediaOverlay">
				@{
					string width;
					string col;
					if (item.Media.Count < 2)
					{
						width = "row row-cols-2 row-cols-sm-2";
						col = "col-6";

					}
					else
					{
						width = "row row-cols-2 row-cols-sm-4";
						col = "col";
					}
				}
					<div class="@width">
						@foreach (var media in item.Media.OrderBy(m => m.DisplayOrder))
						{
							if (media is Video video)
							{
								<div class="@col">
									<div class="media-item">
										<video class="smallMedia" disablePictureInPicture preload="auto" controls controlslist="noplaybackrate nodownload nofullscreen" src="@($"https://cdn.legion-foundation.org/{item.Date + "/" + video.Link}")" type="video/mp4">
										</video>
									</div>
								</div>
							}
							else if (media is Image image)
							{
								<div class="@col">
									<div class="media-item">
										<img class="lazyload smallMedia" src="@($"https://cdn.legion-foundation.org/{item.Date + "/" + image.Link}")" data-src="@($"https://cdn.legion-foundation.org/{item.Date + "/small/" + image.Link}")" />
									</div>
								</div>
							}
							i++;
						}
				</div>
			</div>
		</div>
	}
</div>


<script>
	$(document).ready(function () {

	});

	$(document).ready(function () {
		lazyLoadInstance.update();

		$('img.lazyload').on('load', function () {
			console.log('Lazy-loaded image:', this);
		});

		$('video.lazyload').on('loadeddata', function () {
			console.log('Lazy-loaded video:', this);
		});

		hideOverlay();
		$(".media-item").each(function () {
			var mediaItem = $(this);
			var media = mediaItem.find("img, video");
			if (media.prop('tagName') == 'IMG') {
				var img = new Image();
				img.onload = function () {
					var aspectRatio = img.width / img.height;
					if (aspectRatio >= 1) {
						mediaItem.parent().removeClass("col").addClass("col-12 col-sm-6");
					}
				};
				img.src = media.attr('data-src');
			} else if (media.prop('tagName') == 'VIDEO') {
				if (media[0].readyState > 0) {
					var aspectRatio = media[0].videoWidth / media[0].videoHeight;
					if (aspectRatio >= 1) {
						mediaItem.parent().removeClass("col").addClass("col-12 col-sm-6");
					}

				} else {
					media.on('loadedmetadata', function () {
						var aspectRatio = media[0].videoWidth / media[0].videoHeight;
						if (aspectRatio >= 1) {
							mediaItem.parent().removeClass("col").addClass("col-12 col-sm-6");
						}
					});
				}
			}
		});

		function openModal($media) {
			if ($media.parent().hasClass('mySlides fullpage')) {
				if ($media.is('video')) {
					if ($media[0].paused) {
						$media[0].play();
					} else {
						$media[0].pause();
					}
				} else {
					closeModal();
				}
			} else {
				var $container = $media.closest('.post-media');
				var $child = $container.children(); // row row-cols-2 row-cols-sm-4
				var $childElements = $child.children(); // col
				var $mediaItem = $($childElements.children()); // mediaItem $this

				var modalBefore = '<div id="ModalContent" class="modal">';
				var modalAfter = `</div>`;
				var modalBtns = '<a class="prev" onclick="nextSlides(-1)">&#10094;</a><a class="next" onclick="nextSlides(1)">&#10095;</a><a class="close"></a>';
				$child.append(modalBtns);
				$child.children().wrapAll(modalBefore + modalAfter);
				$("#ModalContent").css('display', 'block');

				$($mediaItem).each(function () {
					$(this).removeClass("media-item count-overlay").addClass("mySlides fullpage").css('display', 'none');
				});
				$media.parent().css('display', 'block');

				var currentSrc = $media.attr('data-src');
				if (currentSrc) {
					var newSrc = currentSrc.replace('/small', '');
					$media.attr('src', newSrc).data('original-src', currentSrc);
				}
				$("html, body").css('overflow', 'hidden');

				$container.find('.count-overlay-text').remove();

				if ($media.is('video')) {
					$media[0].play();
				}
			}

			var modalContent = document.getElementById('ModalContent');
			if (modalContent) {
				modalContent.addEventListener('touchstart', function (e) {
					touchstartX = e.changedTouches[0].screenX;
				}, false);

				modalContent.addEventListener('touchend', function (e) {
					touchendX = e.changedTouches[0].screenX;
					handleSwipe();
				}, false);
			}
		}

		function closeModal($media) {
			var $container = $media.closest('.post-media');
			var $child = $container.children(); // row row-cols-2 row-cols-sm-4
			var $childElements = $child.children(); // col
			if ($media.is('video')) {
				$media[0].pause();
				$media[0].currentTime = 0;
			}

			$child.find('.prev').remove();
			$child.find('.next').remove();
			$child.find('.close').remove();
			var $modalContent = $('#ModalContent');
			$modalContent.children().unwrap();
			$modalContent.remove();

			$child.children().each(function (index, element) {
				$(element).children().removeClass('mySlides fullpage').addClass('media-item').css('display', '');
			});
			$("html, body").css('overflow', '');
		}



		$('.smallMedia').on('click', function () {
			var $media = $(this);
			if ($media.parent().hasClass('mySlides fullpage')) {
				closeModal($media);
				hideOverlay();
			} else {
				openModal($media);
			}
		});

		$(document).on('click', '.close', function () {
			var $media = $('#ModalContent').find('.mySlides.fullpage:visible').children();
			closeModal($media);
			hideOverlay();
		});

		$(document).on('keydown', function (e) {
			if (e.keyCode === 27) { // Check if the ESC key was pressed
				var $closeBtn = $('#ModalContent').find('.close');
				closeModal($closeBtn);
			} else if (e.keyCode === 37) { // Left arrow key
				nextSlides(-1);
			} else if (e.keyCode === 39) { // Right arrow key
				nextSlides(1);
			}
		});

		$('.prev').click(function () {
			nextSlides(-1);
		});

		$('.next').click(function () {
			nextSlides(1);
		});

		function handleSwipe() {
			if (touchendX < touchstartX) {
				nextSlides(1);
			} else if (touchendX > touchstartX) {
				nextSlides(-1);
			}
		}

	});
	function nextSlides(n) {
		var slides = $('.mySlides.fullpage');
		var currentSlide = slides.filter(':visible');
		var currentIndex = slides.index(currentSlide);
		var nextIndex = (currentIndex + n + slides.length) % slides.length;
		var nextSlide = slides.eq(nextIndex);
		var currentVideo = currentSlide.find('video');
		var nextVideo = nextSlide.find('video');
		var image = nextSlide.find('img');

		if (image.length > 0) {
			var currentSrc = $(image).attr('data-src');
			if (currentSrc) {
				var newSrc = currentSrc.replace('/small', '');
				$(image).attr('src', newSrc).data('original-src', currentSrc);
			} else {
				var currentSrcLg = $(image).attr('src');
				var newSrc = currentSrcLg.replace('/small', '');
				$(image).attr('src', newSrc).data('original-src', currentSrcLg);
			}
		}

		if (currentVideo.length > 0) {
			currentVideo.get(0).pause();
		}
		if (nextVideo.length > 0) {
			nextVideo.get(0).play();
		}
		currentSlide.hide();
		nextSlide.show();
	}

	function hideOverlay() {
		$('.feed-post').each(function () {
			var mediaItemCount = $(this).find('.media-item').length;
			var hideMediaOverlay = $(this).find('.post-media').attr('data-hide-media-overlay');
			var hiddenCount = mediaItemCount - hideMediaOverlay;

			if (mediaItemCount > hideMediaOverlay) {
				$(this).find('.media-item:gt(' + (hideMediaOverlay - 1) + ')').hide();
				var hiddenCount = mediaItemCount - hideMediaOverlay;
				$(this).find('.media-item').eq(hideMediaOverlay - 1).addClass('count-overlay')
					.append('<div class="count-overlay-text">+' + hiddenCount + '</div>');
			}
		});
	}
</script>