@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization
@inject IViewLocalizer T
@{
	ViewData["Title"] = @T["Gallery"];
	var Gallery = new Gallery();
	int i = 1;
	<style>
		.feed-container {
			width: 80%;
			margin: 0 auto;
			color: white;
		}

		.feed-post {
			border: 2px solid rgba(255, 255, 255, 0.1);
			border-radius: 1rem;
			margin-bottom: 20px;
			background-color: rgba(255, 255, 255, 0.07);
		}

		.post-header {
			border-bottom: 2px solid rgba(255, 255, 255, 0.1);
			display: flex;
			padding: 10px;
			align-items: center;
			border-top-left-radius: 1rem;
			border-top-right-radius: 1rem;
			background-color: rgba(0,0,0, 0.1);
		}

		.profile-picture {
			width: 50px;
			height: 50px;
			border-radius: 50%;
		}

		.post-info {
			margin-left: 20px;
		}

		.username {
			font-weight: bold;
		}

		.post-time {
			color: white;
		}

		.post-content {
			margin: 20px;
		}

		.post-media {
			display: flex;
			justify-content: left;
			flex-wrap: wrap;
			margin-top: 20px;
			position: relative;
		}

		.media-item {
			width: 30%;
			margin-right: 10px;
			border-radius: 1rem;
		}

			.media-item img, .media-item video {
				width: 100%;
				border-radius: 1rem;
			}

		.post-options {
			margin-top: 20px;
			display: flex;
		}

		.count-overlay img, .count-overlay video {
			width: 100%;
			opacity: 0.5;
			z-index: -1;
			border-radius: 1rem;
		}


		.count-overlay-text {
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			color: white;
			font-size: 2rem;
			text-align: center;
		}

		.count-overlay {
			position: relative;
			display: flex;
			justify-content: center;
			align-items: center;
			text-align: center;
			font-size: 2rem;
			width: 30%;
			margin-right: 10px;
			border-radius: 1rem;
			background-color: rgba(0, 0, 0, 0.5);
			color: white;
		}

		.like-button, .comment-button, .share-button {
			margin-right: 10px;
		}
	</style>
	<div class="feed-container">
		@foreach (var item in Gallery.ItemList)
		{
			<div class="feed-post">
				<div class="post-header">
					<img src="/images/logo.png" class="profile-picture">
					<div class="post-info">
						<div class="username">Legion Foundation</div>
						<div class="post-time">@item.Date.ToString()</div>
					</div>
				</div>
				<div class="post-content">
					@item.Title
				</div>
				<div class="post-media">

					@if (item.Video != null)
					{
						@foreach (var video in item.Video)
						{
							<div class="media-item">
								<video controls preload="metadata" controlslist="noplaybackrate nodownload">
									<source src=@video.Link type="video/mp4">
								</video>
							</div>
						}
					}
					@if (item.Image != null)
					{
						@foreach (var image in item.Image)
						{
							<div class="media-item" onclick="openModal();currentSlide(@i)"><img src=@image.Link></div>
							i++;
						}
					}
				</div>
				<div class="post-options">
					<a href="#" class="like-button">Like</a>
					<a href="#" class="comment-button">Comment</a>
					<a href="#" class="share-button">Share</a>
				</div>
			</div>
		}
	</div>
}
<script src="https://code.jquery.com/jquery-3.6.3.min.js"></script>
<script>
	$(document).ready(function() {
		$('.feed-post').each(function() {
			var mediaItemCount = $(this).find('.media-item').length;
			if (mediaItemCount > 6) {
				$(this).find('.media-item:gt(5)').hide();
				var hiddenCount = mediaItemCount - 6;
				$(this).find('.media-item:nth-of-type(6)').attr('class', 'media-item count-overlay');
				$(this).find('.media-item:nth-of-type(6)').append('<div class="count-overlay-text">+' + hiddenCount + ' more</div>');
			}
		});
	});
</script>


<script src="https://cdn.jsdelivr.net/npm/masonry-layout@4.2.2/dist/masonry.pkgd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vanilla-lazyload@17.8.3/dist/lazyload.min.js"></script>
<script>
	(function() {
		function logElementEvent(eventName, element) {
			console.log(Date.now(), eventName, element.getAttribute("data-src"));
		}

		var callback_enter = function(element) {
			logElementEvent("🔑 ENTERED", element);
		};
		var callback_exit = function(element) {
			logElementEvent("🚪 EXITED", element);
		};
		var callback_loading = function(element) {
			logElementEvent("⌚ LOADING", element);
		};
		var callback_loaded = function(element) {
			logElementEvent("👍 LOADED", element);
		};
		var callback_error = function(element) {
			logElementEvent("💀 ERROR", element);
			element.src = "https://via.placeholder.com/440x560/?text=Error+Placeholder";
		};
		var callback_finish = function() {
			logElementEvent("✔️ FINISHED", document.documentElement);
		};
		var callback_cancel = function(element) {
			logElementEvent("🔥 CANCEL", element);
		};

		ll = new LazyLoad({
			// Assign the callbacks defined above
			callback_enter: callback_enter,
			callback_exit: callback_exit,
			callback_cancel: callback_cancel,
			callback_loading: callback_loading,
			callback_loaded: callback_loaded,
			callback_error: callback_error,
			callback_finish: callback_finish,
			// For debugging purposes
			threshold: 0
		});
	})();
	$(document).ready(function() {
		$(".media-item").each(function() {
			var media = $(this).find("img, video");
			var aspectRatio = media.width() / media.height();

			if (aspectRatio >= 1) {
				$(this).addClass("landscape");
			} else {
				$(this).addClass("portrait");
			}
		});
	});

</script>
<script>
	$.fn.videoLoaded = function() {
		var $videos = this.find('video');
		var deferred = $.Deferred();

		function checkLoaded() {
			var count = 0;
			$videos.each(function() {
				if (this.readyState === 4) {
					count++;
				}
			});
			if (count === $videos.length) {
				deferred.resolve();
			} else {
				setTimeout(checkLoaded, 50);
			}
		}
		checkLoaded();
		return deferred;
	};
</script>
<script>
	var $grid = $('.grid').masonry({
		columnWidth: $grid.find('.grid-sizer')[0],
		//fitWidth: true,
		itemSelector: '.grid-item',
		gutter: 0,
		//horizontalOrder: true
		percentPosition: true
	});

	$.when(
		//$grid.imagesLoaded(),
		$grid.videoLoaded()
	).then(function() {
		$grid.masonry('layout');
	});
</script>

<!-- Modal -->
<style>
	.fullpage {
		overflow: auto;
		display: none;
		position: fixed;
		z-index: 9999;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-size: contain;
		background-repeat: no-repeat no-repeat;
		background-position: center center;
		background-color: black;
		cursor: zoom-out;
	}

	.prev,
	.next {
		cursor: pointer;
		position: fixed;
		top: 50%;
		width: auto;
		padding: 16px;
		margin-top: -50px;
		color: white;
		font-weight: bold;
		text-decoration: none;
		font-size: 20px;
		transition: 0.6s ease;
		border-radius: 0 3px 3px 0;
		user-select: none;
		-webkit-user-select: none;
		z-index: 9999;
	}

	.next {
		right: 0;
		border-radius: 3px 0 0 3px;
	}

		.prev:hover,
		.next:hover {
			background-color: rgba(0, 0, 0, 0.8);
		}

</style>
<script>
	function CreateModal() {
		const imgs = document.querySelectorAll('.media-item img');
		var modalContent = document.getElementById("ModalContent");
		var oldHtml = modalContent.innerHTML;
		modalContent.innerHTML = "";
		imgs.forEach(img => {
			modalContent.innerHTML += '<div class="mySlides fullpage" style="background-image: url(' + img.src + ');" onclick="closeModal()"></div>';
		});
		modalContent.innerHTML += oldHtml;
	}

	function openModal() {
		CreateModal();
		document.getElementById("ModalContent").style.display = "block";
		var x = document.getElementsByTagName("BODY")[0];
		x.style.overflow = "hidden";
	}

	function closeModal() {
		document.getElementById("ModalContent").style.display = "none";
		var x = document.getElementsByTagName("BODY")[0];
		x.style.overflow = "auto";
	}

	var slideIndex = 1;
	showSlides(slideIndex);

	function plusSlides(n) {
		var numSlides = document.getElementsByClassName("mySlides").length;
		slideIndex += n;
		if (slideIndex > numSlides) {
			slideIndex = 1;
		} else if (slideIndex < 1) {
			slideIndex = numSlides;
		}
		showSlides(slideIndex);
	}

	function currentSlide(n) {
		showSlides(slideIndex = n);
	}

	function showSlides(n) {
		var i;
		var slides = document.getElementsByClassName("mySlides");
		if (n > slides.length) { slideIndex = 1 }
		if (n < 1) { slideIndex = slides.length }
		for (i = 0; i < slides.length; i++) {
			slides[i].style.display = "none";
		}
		slides[slideIndex - 1].style.display = "block";
	}
</script>

<div id="ModalContent" class="modal lazy" ontouchstart="touchStart(event)" ontouchmove="touchMove(event)" ontouchend="touchEnd(event)">
	<a class="prev" onclick="plusSlides(-1)">&#10094;</a>
	<a class="next" onclick="plusSlides(1)">&#10095;</a>
</div>

<script>
	document.addEventListener('keydown', (event) => {
		switch (event.keyCode) {
			case 37:
				plusSlides(-1);
				break;
			case 39:
				plusSlides(1);
				break;
			case 38:
				// Up arrow key
				closeModal();
				break;
			case 40:
				// Down arrow key
				closeModal();
				break;
		}
	});
</script>
<script>
	let xDown = null;
	let yDown = null;

	function touchStart(event) {
		xDown = event.touches[0].clientX;
		yDown = event.touches[0].clientY;
	}

	function touchMove(event) {
		if (!xDown || !yDown) {
			return;
		}

		const xUp = event.touches[0].clientX;
		const yUp = event.touches[0].clientY;

		const xDiff = xDown - xUp;
		const yDiff = yDown - yUp;

		// Minimum distance to swipe before changing slides
		const threshold = 5;

		if (Math.abs(xDiff) > Math.abs(yDiff)) {
			if (Math.abs(xDiff) > threshold) {
				if (xDiff > 0) {
					// Left swipe
					plusSlides(1);
				} else {
					// Right swipe
					plusSlides(-1);
				}
			}
		} else {
			if (Math.abs(yDiff) > threshold) {
				if (yDiff > 0) {
					// Up swipe or up arrow key
					closeModal();
				} else {
					// Down swipe or down arrow key
					closeModal();
				}
			}
		}

		xDown = null;
		yDown = null;
	}

	function touchEnd(event) {
		xDown = null;
		yDown = null;
	}
</script>
<!-- Modal End -->