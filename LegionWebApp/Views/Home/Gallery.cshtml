@model IEnumerable<LegionWebApp.Models.GalleryItem>
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization
@inject IViewLocalizer T
@{
	ViewData["Title"] = "Gallery";
}
<div id="gallery-items" class="feed-container">
	@foreach (var item in Model)
	{
		@await Html.PartialAsync("_GalleryItems", item)
	}
</div>
<div class="load-more-placeholder"></div>

@section Scripts {
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.lazy/1.7.9/jquery.lazy.min.js"></script>
	<script>
		// Create a new Intersection Observer
		const observer = new IntersectionObserver((entries, observer) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					const img = entry.target;
					const src = img.getAttribute('data-src');
					//img.setAttribute('src', src);
					img.classList.add('loaded');

					// Unobserve the element
					observer.unobserve(entry.target);
				}
			});
		}, { threshold: 0.1 });
		// Observe all lazy images
		function observeLazyImages() {
			const lazyImages = document.querySelectorAll('img.lazy:not(.loaded)');
			lazyImages.forEach(img => observer.observe(img));
		}
		// Initial observation
		observeLazyImages();
	</script>

	<script>
		(function () {
			$(document).ready(function () {
				var page = 2;
				var loading = false;
				var hasMoreItems = true;

				function loadMoreItems() {
					if (loading || !hasMoreItems) return;

					loading = true;
					$('.load-more-placeholder').html('<div class="text-center"><div class="spinner-border" role="status"></div></div>');

					$.ajax({
						url: "/Home/Gallery",
						type: "GET",
						data: {
							page: page,
							pageSize: 1 // Set pageSize to 1
						},
						success: function (data) {
							if (data.trim() !== "") {
								$('#gallery-items').append(data);
								page++;
							} else {
								hasMoreItems = false;
							}

							loading = false;
							$('.load-more-placeholder').html('');

							var rect = $('.load-more-placeholder')[0].getBoundingClientRect();
							console.log("rect" + rect)
							var isInViewport = rect.top < window.innerHeight && rect.bottom >= 0;
							console.log("isInViewport " + isInViewport)
							if (isInViewport) {
								// If it's not, manually trigger loadMoreItems
								setTimeout(loadMoreItems, 100); // Add a delay to prevent infinite loop
							}
						}
					});
				}

				loadMoreItems(); // Call loadMoreItems once when the document is ready

				$(window).scroll(function () {
					if ($(window).scrollTop() + $(window).height() > $('.load-more-placeholder').offset().top - 200) {
						loadMoreItems();
					}
				});

				// Initialize the IntersectionObserver
				var options = {
					rootMargin: '0px',
					threshold: 0.1
				};

				var observer = new IntersectionObserver(function (entries, observer) {
					entries.forEach(function (entry) {
						if (entry.isIntersecting) {
							loadMoreItems();
						}
					});
				}, options);

				observer.observe($('.load-more-placeholder')[0]);
			});

		})();
	</script>


	<script>
		var modalOpen = false;

		function openModal($media) {
			console.log($media[0].outerHTML);
			if ($media.parent().hasClass('mySlides fullpage')) {
				if ($media.is('video')) {
					if ($media[0].paused) {
						$media[0].play().catch(() => {
							// Handle the play() request interruption here
						});
					} else {
						$media[0].pause();
					}
				}
			} else {
				var currentSrc = $media.attr('data-src');
				if (currentSrc) {
					var newSrc = currentSrc.replace('/small', '');
					$media.attr('src', newSrc).data('original-src', currentSrc);
				}

				var $container = $media.closest('.post-media'); // <div class="container post-media">
				//console.log("$container: " + $container[0].outerHTML);
				var $rowCols = $container.children(); // <div class="row row-cols-2 row-cols-sm-4"> single row for all media items
				//console.log("$child " + $rowCols[0].outerHTML);
				var $col = $rowCols.children(); // <div class="col">
				//console.log("$childElements " + $col[0].outerHTML);
				var $mediaItem = $($col.children()); // mediaItem $this <div class="media-item" style="">
				//console.log("$mediaItem " + $mediaItem[0].outerHTML);

				var modalBefore = '<div id="ModalContent" class="modal">';
				var modalAfter = `</div>`;
				var modalBtns = '<a class="prev" onclick="nextSlides(-1)">&#10094;</a><a class="next" onclick="nextSlides(1)">&#10095;</a><a class="close"></a>';
				$rowCols.append(modalBtns);
				$rowCols.children().wrapAll(modalBefore + modalAfter);
				$("#ModalContent").css('display', 'block');

				$($mediaItem).each(function () {
					if ($(this).children().hasClass('count-overlay')) {
						var $lastImage = $(this).children().html();
						$(this).children().remove();
						$(this).append($lastImage);
						$(this).children().addClass('LastImage');
					}					
					$(this).removeClass("count-overlay").addClass("mySlides fullpage").css('display', 'none');
				});
				
				$($mediaItem).children().each(function () {
					if ($(this).attr('src') == "" || !$(this).attr('src')) {
						$(this).addClass('NonLoad');
					}
				});

				$media.css('display', 'block');

				
				$("html, body").css('overflow', 'hidden');

				$container.find('.count-overlay-text').remove();

				if ($media.is('video')) {
					$media[0].play().catch(() => {
						// Handle the play() request interruption here
					});
				}

			}
		}

		function closeModal($media) {
			if ($media.is('video')) {
				$media[0].pause();
			}
			var $container = $media.closest('.post-media');
			var $rowCols = $container.children(); // row row-cols-2 row-cols-sm-4
			//console.log("$rowCols " + $rowCols[0].outerHTML);
			var $modalElement = $rowCols.children(); // <div id="ModalContent" class="modal" style="display: block;">
			//console.log("$modalElement " + $modalElement[0].outerHTML);
			var $col = $modalElement.children(); // <div class="col">
			//console.log("$col " + $col[0].outerHTML);
			var $mediaItem = $col.children();
			//console.log("$mediaItem " + $mediaItem[0].outerHTML);


			var hiddenCount = $rowCols.data('hidden-count');

			$mediaItem.children().each(function () {
				if ($(this).hasClass('NonLoad')) {
					$(this).removeAttr('src');
					$(this).removeClass('NonLoad');
				}
				if ($(this).hasClass('LastImage')) {
					$(this).removeClass("LastImage").addClass("count-overlay");
					$(this).wrap('<div class="count-overlay"></div>');
					$(this).parent().prepend('<div class="count-overlay-text">+' + hiddenCount + '</div>')
				}
			});


			if ($media.is('video')) {
				$media[0].pause();
				$media[0].currentTime = 0;
			}

			$rowCols.find('.prev').remove();
			$rowCols.find('.next').remove();
			$rowCols.find('.close').remove();
			var $modalContent = $('#ModalContent');
			$modalContent.children().unwrap();
			$modalContent.remove();

			$rowCols.children().each(function (index, element) {
				if ($(this).css('display') === 'none') {
				}
				$(element).children().removeClass('mySlides fullpage').addClass('media-item').css('display', '');
			});
			$("html, body").css('overflow', '');
		}

		$(document).on('click', '.smallMedia, .count-overlay', function (e) {
			var $media = $(this).is('img, video') ? $(this) : $(this).find('img, video');
			var $mediaItem = $media.closest('.media-item');

			if (modalOpen) {
				if ($media.is('video')) {
					if ($media[0].paused) {
						$media[0].play().catch(() => {
							// Handle the play() request interruption here
						});
					} else {
						$media[0].pause();
					}
				} else {
					closeModal($media);
					modalOpen = false;
				}
			} else {
				openModal($media);
				$mediaItem.css('display', 'block');
				modalOpen = true;
			}
			e.stopPropagation();
		});



		$(document).on('click', '.close', function () {
			var $media = $('.mySlides.fullpage:visible').find('img, video');
			closeModal($media);
			modalOpen = false;
		});

		$(document).on('keydown', function (e) {
			if (e.keyCode === 27) { // Check if the ESC key was pressed
				var $media = $('.mySlides.fullpage:visible').find('img, video');
				closeModal($media);
				modalOpen = false;
			} else if (e.keyCode === 37) { // Left arrow key
				nextSlides(-1);
			} else if (e.keyCode === 39) { // Right arrow key
				nextSlides(1);
			}
		});

		$('.prev').click(function () {
			nextSlides(-1);
		});

		$('.next').click(function () {
			nextSlides(1);
		});

		function handleSwipe() {
			if (touchendX < touchstartX) {
				nextSlides(1);
			} else if (touchendX > touchstartX) {
				nextSlides(-1);
			}
		}

		function nextSlides(n) {
			var slides = $('.mySlides.fullpage');
			var currentSlide = slides.filter(':visible');
			var currentIndex = slides.index(currentSlide);
			var nextIndex = (currentIndex + n + slides.length) % slides.length;
			var nextSlide = slides.eq(nextIndex);
			var currentVideo = currentSlide.find('video');
			var nextVideo = nextSlide.find('video');
			var image = nextSlide.find('img');

			if (image.length > 0) {
				var currentSrc = $(image).attr('data-src');
				if (currentSrc) {
					var newSrc = currentSrc.replace('/small', '');
					$(image).attr('src', newSrc).data('original-src', currentSrc);
				} else {
					var currentSrcLg = $(image).attr('src');
					var newSrc = currentSrcLg.replace('/small', '');
					$(image).attr('src', newSrc).data('original-src', currentSrcLg);
				}
			}

			if (currentVideo.length > 0) {
				currentVideo.get(0).pause();
			}
			if (nextVideo.length > 0) {
				nextVideo.get(0).play();
			}
			currentSlide.hide();
			nextSlide.show();
		}
	</script>
}
