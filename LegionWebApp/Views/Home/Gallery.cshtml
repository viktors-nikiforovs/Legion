@using LegionWebApp.Models
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization
@inject LegionWebApp.Data.ApplicationDbContext DbContext
@inject IViewLocalizer T

@{
	ViewData["Title"] = @T["Gallery"];
	var Gallery = new GalleryModel(DbContext);
	/*
		* animate modal
		* on scrollup pause
		* thumbnails in modal
		* scroll one post at time
		* FB Login
		* Fund raising
		* admin cp
		* telegram bot
		* facebook bot
		* Contact email @domain
		* subdomains
		* card paytments
		* parthners
	*/
}
<div class="feed-container">
	@foreach (var item in Gallery.ItemList)
	{
		int i = 1;
		<div class="feed-post">
			<div class="post-header">
				<img src="/images/logo.png" class="profile-picture">
				<div class="post-info">
					<div class="username">@T["Legion Foundation"]</div>
					<div class="post-time">@item.Date.ToString()</div>
				</div>
			</div>
			<div class="post-content">
				@T[@item.Title]
			</div>
			<div class="container post-media">
				<div class="row row-cols-2 row-cols-sm-4">
					@foreach (var media in item.Media)
					{
						if (media is Video video)
						{
							<div class="col">
								<div class="media-item" data-post-id="@item.Id" onclick="togglePlayPause(this,@item.Id, @i)" ontouchstart="togglePlayPause(this,@item.Id, @i)">
									<video disablePictureInPicture preload="metadata" muted controls controlslist="noplaybackrate nodownload nofullscreen" data-src="@($"{video.Link}#t=0.5")" poster="@video.Poster" type="video/mp4"></video>
								</div>
							</div>
						}
						else if (media is Image image)
						{
							<div class="col">
								<div class="media-item" data-post-id="@item.Id">
									<img onclick="openModal(@item.Id, @i);" data-src="@image.Link" />
								</div>
							</div>
						}
						i++;
					}
				</div>
			</div>
		</div>
	}
</div>
<div id="ModalContent" class="modal" ontouchstart="touchStart(event)" ontouchmove="touchMove(event)" ontouchend="touchEnd(event)">
	<a class="prev" onclick="plusSlides(-1)">&#10094;</a>
	<a class="next" onclick="plusSlides(1)">&#10095;</a>
	<a class="close" onclick="closeModal()"></a>
</div>
<script src="https://code.jquery.com/jquery-3.6.3.min.js"></script>
<script>
	$(document).ready(function() {
		$('.feed-post').each(function() {
			var mediaItemCount = $(this).find('.media-item').length;
			if (mediaItemCount > 6) {
				$(this).find('.media-item:gt(5)').hide();
				var hiddenCount = mediaItemCount - 6;
				var postId = $(this).find('.media-item:gt(5)').attr(`data-post-id`);

				$(this).find('.media-item').eq(5).addClass('count-overlay').attr('onclick', 'openModal(' + postId + ', 6);currentSlide(6);')
					.append('<div class="count-overlay-text">+' + hiddenCount + '</div>');
			}

			// Set the src attribute for the first 6 media items
			$(this).find('.media-item:lt(6)').each(function() {
				var media = $(this).find('img, video');
				var src = media.attr('data-src');
				media.attr('src', src).removeAttr('data-src');
			});
		});
		$(".media-item").each(function() {
			var mediaItem = $(this);
			var media = mediaItem.find("img, video");
			if (media.prop('tagName') == 'IMG') {
				var img = new Image();
				img.onload = function() {
					var aspectRatio = img.width / img.height;
					if (aspectRatio >= 1) {
						mediaItem.parent().removeClass("col").addClass("col-12 col-sm-6");
					}
				};
				img.src = media.attr('src');
			} else if (media.prop('tagName') == 'VIDEO') {
				if (media[0].readyState > 0) {
					var aspectRatio = media[0].videoWidth / media[0].videoHeight;
					if (aspectRatio >= 1) {
						mediaItem.parent().removeClass("col").addClass("col-12 col-sm-6");
					}

				} else {
					media.on('loadedmetadata', function() {
						var aspectRatio = media[0].videoWidth / media[0].videoHeight;
						if (aspectRatio >= 1) {
							mediaItem.parent().removeClass("col").addClass("col-12 col-sm-6");
						}
					});
				}
			}
		});
	});
</script>
<!-- Modal -->
<script>
	let slideIndex = 1;

	function togglePlayPause(element, itemId, itemNumber) {
		openModal(itemId, itemNumber);
		if (element.paused) {
			element.play();
			element.style.display = "block";
		} else {
			element.pause();
			element.style.display = "none";
		}
	}
	function CreateModal(imgs) {
		var modalContent = document.getElementById("ModalContent");
		var oldHtml = modalContent.innerHTML;
		modalContent.innerHTML = "";
		imgs.forEach((img, index) => {
			if (img.tagName == 'VIDEO') {
				modalContent.innerHTML += '<div class="mySlides fullpage"><video disablePictureInPicture controls preload="metadata" controlslist="noplaybackrate nodownload nofullscreen"  onclick="this.paused?this.play():this.pause();" ontouchstart="this.paused?this.play():this.pause();" src="' + img.src + '" type="video/mp4"></video></div>';
			} else {
				modalContent.innerHTML += '<div class="mySlides fullpage" onclick="closeModal();"><img src="' + img.src + '"></div>';
			}
		});
		modalContent.innerHTML += oldHtml;
	}
	function openModal(postId, itemNumber) {
    slideIndex = itemNumber; // Add this line to update the global slideIndex value
    var posts = document.querySelectorAll(`[data-post-id='${postId}']`);
    var imgs = [];
    posts.forEach(post => {
        var postImgs = post.querySelectorAll('.media-item video, .media-item img');
        postImgs.forEach(img => {
            // Set the src attribute from the src attribute if not null, otherwise use data-src
            var src = img.getAttribute('src') || img.getAttribute('data-src');
            img.setAttribute('src', src);
            imgs.push(img);
        });
    });
    CreateModal(imgs);
    document.getElementById("ModalContent").style.display = "block";
    var x = document.getElementsByTagName("BODY")[0];
    x.style.overflow = "hidden";
    showSlides(slideIndex);
}



	function closeModal() {
		document.getElementById("ModalContent").style.display = "none";
		var x = document.getElementsByTagName("BODY")[0];
		x.style.overflow = "auto";
		document.getElementById("ModalContent").innerHTML = '<a class="prev" onclick="plusSlides(-1)">&#10094;</a><a class="next" onclick="plusSlides(1)">&#10095;</a><a class="close" onclick="closeModal()"></a>';
	}
function plusSlides(n) {
    var numSlides = document.getElementsByClassName("mySlides").length;
    var newSlideIndex = slideIndex + n;

    if (newSlideIndex > numSlides) {
        newSlideIndex = 1;
    } else if (newSlideIndex < 1) {
        newSlideIndex = numSlides;
    }
    slideIndex = newSlideIndex;
    showSlides(slideIndex);
}

	function showSlides(n) {
		var i;
		var slides = document.getElementsByClassName("mySlides");
		if (n > slides.length) {
			n = 1;
		}
		if (n < 1) {
			n = slides.length;
		}
		for (i = 0; i < slides.length; i++) {
			slides[i].style.display = "none";
			if (slides[i].firstElementChild.tagName === "VIDEO") {
				slides[i].firstElementChild.pause();
			}
		}
		slides[n - 1].style.display = "block";
		if (slides[n - 1].firstElementChild.tagName === "VIDEO") {
			slides[n - 1].firstElementChild.play();
		}
	}
</script>
<script>
	$(document).on("keypress", function(e) {
		switch (e) {
			case 37:
				plusSlides(-1);
				setTimeout(function() { }, 1000);
				break;
			case 39:
				plusSlides(1);
				break;
			case 38:
				// Up arrow key
				closeModal();
				break;
			case 40:
				// Down arrow key
				closeModal();
				break;
		}
	});
	document.addEventListener('keydown', (event) => {
		switch (event.keyCode) {
			case 37:
				plusSlides(-1);
				break;
			case 39:
				plusSlides(1);
				break;
			case 38:
				// Up arrow key
				closeModal();
				break;
			case 40:
				// Down arrow key
				closeModal();
				break;
			case 27:
				// Escape key
				closeModal();
				break;
		}
	});
	let xDown = null;
	let yDown = null;
	function touchStart(event) {
		xDown = event.touches[0].clientX;
		yDown = event.touches[0].clientY;
	}
	function touchMove(event) {
		if (!xDown || !yDown) {
			return;
		}
		const xUp = event.touches[0].clientX;
		const yUp = event.touches[0].clientY;
		const xDiff = xDown - xUp;
		const yDiff = yDown - yUp;
		// Minimum distance to swipe before changing slides
		const threshold = 5;
		if (Math.abs(xDiff) > Math.abs(yDiff)) {
			if (Math.abs(xDiff) > threshold) {
				if (xDiff > 0) {
					// Left swipe
					plusSlides(1);
				} else {
					// Right swipe
					plusSlides(-1);
				}
			}
		} else {
			if (Math.abs(yDiff) > threshold) {
				if (yDiff > 0) {
					// Up swipe or up arrow key
					closeModal();
				} else {
					// Down swipe or down arrow key
					closeModal();
				}
			}
		}
		xDown = null;
		yDown = null;
	}
	function touchEnd(event) {
		xDown = null;
		yDown = null;
	}
</script>
<!-- Modal End -->